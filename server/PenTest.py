from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
import requests
import re
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
import webbrowser
from robot.api.deco import library, keyword
from jinja2 import Template
import time

@library
class PenTest:
    def __init__(self, proxies=None):
        self.proxies = proxies
        self.driver = self.setup_selenium()

    def setup_selenium(self):
        chrome_options = Options()
        if self.proxies:
            chrome_options.add_argument(f'--proxy-server={self.proxies["http"]}')

        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
        return driver

    @keyword
    def scan_website(self, url):
        original_window = self.driver.current_window_handle
        self.driver.get(url)
        self.driver.maximize_window()
        time.sleep(5)  # Allow time for the page to load and JavaScript to execute
        discovered_urls = self.discover_urls()
        print(f"Discovered {len(discovered_urls)} URLs on {url}:\n")
        for i, discovered_url in enumerate(discovered_urls[:5], start=1):
            print(f"{i}. {discovered_url}")
        alert_script = f"alert('Got the URLs from the web page and starting the scan on those');"
        self.driver.execute_script(alert_script)
        time.sleep(3)  # Allow time for the alert to be displayed
        self.driver.switch_to.alert.accept()  # Close the alert
        vulnerabilities_report = {}
        for page_url in discovered_urls[:5]:
            alert_script = f"alert('Navigating to: {page_url}');"
            self.driver.execute_script(alert_script)
            time.sleep(3)  # Allow time for the alert to be displayed
            self.driver.switch_to.alert.accept()  # Close the alert
            self.driver.get(page_url)
            page_vulnerabilities = self.scan_url(page_url)
            vulnerabilities_report[page_url] = page_vulnerabilities
          
            if page_vulnerabilities:
                print(f"\nVulnerabilities found on {page_url}:")
                for vulnerability, attack_method in page_vulnerabilities.items():
                    print(f"\nVulnerability: {vulnerability}")
                    print(f"Attack Method: {attack_method}")
            else:
                print(f"No vulnerabilities found on {page_url}.")

        self.generate_html_report(vulnerabilities_report)
        self.driver.switch_to.window(original_window)
        self.close()
       
        return vulnerabilities_report
    # def scan_website(self, url):
    #     self.driver.get(url)
    #     time.sleep(5)  # Allow time for the page to load
    #     discovered_urls = self.discover_urls()
    #     print(f"Discovered {len(discovered_urls)} URLs on {url}:\n")
    #     for i, discovered_url in enumerate(discovered_urls, start=1):
    #         print(f"{i}. {discovered_url}")
    #
    #     for page_url in discovered_urls:
    #         vulnerabilities = self.scan_url(page_url)
    #         if vulnerabilities:
    #             print(f"\nVulnerabilities found on {page_url}:")
    #             for vulnerability, attack_method in vulnerabilities.items():
    #                 print(f"\nVulnerability: {vulnerability}")
    #                 print(f"Attack Method: {attack_method}")
    #                 if vulnerability == "SQL injection vulnerability":
    #                     print("\nSQL Injection Method:")
    #                     print("1. Identify the input field vulnerable to SQL injection")
    #                     print("2. Inject SQL code to manipulate the query, e.g., ' OR '1'='1'")
    #                     print("3. Observe the response for any error messages or unusual behavior")
    #                     self.exploit_sql_injection(page_url)
    #                 if vulnerability == "Cross-site scripting (XSS) vulnerability":
    #                     print("\nXSS Attack Method:")
    #                     print("1. Identify the input field vulnerable to XSS")
    #                     print("2. Inject malicious scripts, e.g., <script>alert('XSS')</script>")
    #                     print("3. Observe the behavior of the injected script")
    #                     self.exploit_xss_vulnerability(page_url)

    def discover_urls(self):
        urls = []
        elements = self.driver.find_elements(By.TAG_NAME, 'a')
        for element in elements:
            url = element.get_attribute('href')
            if url not in urls:
                urls.append(url)
        return urls

    def scan_url(self, url):
        vulnerabilities = {}
        if self.is_sql_injection_vulnerable(url):
            vulnerabilities["SQL injection vulnerability"] = "Injecting SQL code into input fields"
        if self.is_xss_vulnerable(url):
            vulnerabilities[
                "Cross-site scripting (XSS) vulnerability"] = "Injecting malicious scripts into input fields"
        if self.has_insecure_configuration(url):
            vulnerabilities["Insecure server configuration"] = "Exploiting insecure communication protocols"
        return vulnerabilities

    def is_sql_injection_vulnerable(self, url):
        payloads = [
            "' OR '1'='1",
            "' OR '1'='1' --",
            "' OR '1'='1' /*",
            "1' OR '1' = '1",
            "1' OR '1' = '1' --",
            "1' OR '1' = '1' /*"
        ]
        for payload in payloads:
            params = {'id': payload}
            print(f"Testing URL: {url} with payload: {payload}")
        try:
            full_url = f"{url}?id={payload}"
            print(f"Full URL being requested: {full_url}")

            response = requests.get(url, params=params, proxies=self.proxies, timeout=10)
            print(f"HTTP response status code: {response.status_code}")

            if response.status_code != 200:
                print(f"Request was blocked or not successful: Status code {response.status_code}")
                return False

            print(f"HTTP response content:\n{response.text[:500]}")

            sql_error_patterns = [
                "SQL syntax",
                "mysql_fetch",
                "SQL error",
                "Warning: mysql",
                "Unclosed quotation mark",
                "quoted string not properly terminated",
                "Microsoft OLE DB Provider for SQL Server",
                "ORA-",
                "You have an error in your SQL syntax",
                "mysql_",
                "PostgreSQL query failed"
            ]

            for pattern in sql_error_patterns:
                if re.search(pattern, response.text, re.IGNORECASE):
                    print(f"Possible SQL injection vulnerability detected on {url}")
                    return True

            print(f"No SQL injection vulnerability detected on {url}")
        except requests.RequestException as e:
            print(f"Error checking SQL injection on {url}: {e}")

        return False

    def is_xss_vulnerable(self, url):
        payloads = [
            "<script>alert('XSS')</script>",
            "'\"><img src='x' onerror='alert(1)'>",
            "<svg/onload=alert(1)>",
            "\"/><script>alert('XSS')</script>"
        ]
        for payload in payloads:
            print(f"Testing URL: {url} with payload: {payload}")
            try:
                full_url = f"{url}?input={payload}"
                print(f"Full URL being requested: {full_url}")

                response = requests.get(url, params={'input': payload}, proxies=self.proxies, timeout=10)
                print(f"HTTP response status code: {response.status_code}")

                if response.status_code != 200:
                    print(f"Request was blocked or not successful: Status code {response.status_code}")
                    continue

                print(f"HTTP response content:\n{response.text[:500]}")

                if payload in response.text:
                    print(f"Possible XSS vulnerability detected with payload {payload} on {url}")
                    return True

                print(f"No XSS vulnerability detected with payload {payload} on {url}")
            except requests.RequestException as e:
                print(f"Error checking XSS on {url} with payload {payload}: {e}")

        return False

    def has_insecure_configuration(self, url):
        return not url.startswith("https")

    @keyword
    def generate_html_report(self, vulnerabilities_report):
        template = Template("""
        <html>
        <head>
            <title>Vulnerability Scan Report</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
                h1 { color: #333; }
                table { width: 100%; border-collapse: collapse; margin-top: 20px; table-layout: fixed; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; word-wrap: break-word; }
                th { background-color: #f2f2f2; }
                a { color: #1a0dab; text-decoration: none; }
                a:hover { text-decoration: underline; }
                .vulnerable { background-color: #f8d7da; color: #721c24; }
                .safe { background-color: #d4edda; color: #155724; font-weight: bold; }
            </style>
        </head>
        <body>
            <h1>Vulnerability Scan Report</h1>
            <table>
                <tr>
                    <th>URL</th>
                    <th>Vulnerability</th>
                    <th>Details</th>
                </tr>
                {% for url, vulnerabilities in vulnerabilities_report.items() %}
                    {% if vulnerabilities %}
                        {% for vulnerability, details in vulnerabilities.items() %}
                            <tr class="vulnerable">
                                <td><a href="{{ url }}" target="_blank">{{ url }}</a></td>
                                <td>{{ vulnerability }}</td>
                                <td>{{ details }}</td>
                            </tr>
                        {% endfor %}
                    {% else %}
                        <tr class="safe">
                            <td><a href="{{ url }}" target="_blank">{{ url }}</a></td>
                            <td>No vulnerabilities found.</td>
                            <td>NA</td>
                        </tr>
                    {% endif %}
                {% endfor %}
            </table>
        </body>
        </html>
        """)
        report = template.render(vulnerabilities_report=vulnerabilities_report)
        with open("vulnerability_report.html", "w") as file:
            file.write(report)
    # def generate_html_report(self, vulnerabilities_report):
    #     template = Template("""
    #     <html>
    #     <head>
    #         <title>Vulnerability Scan Report</title>
    #         <style>
    #             body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
    #             h1 { color: #333; }
    #             .container { margin: 20px 0; }
    #             .url { font-size: 1.2em; font-weight: bold; color: #0056b3; }
    #             .vulnerabilities { margin-top: 10px; }
    #             .vulnerabilities ul { padding-left: 20px; }
    #             .vulnerabilities li { margin-bottom: 10px; }
    #             .vulnerabilities li strong { color: #d9534f; }
    #             .no-vulnerabilities { color: #5cb85c; font-weight: bold; }
    #         </style>
    #     </head>
    #     <body>
    #         <h1>Vulnerability Scan Report</h1>
    #         {% for url, vulnerabilities in vulnerabilities_report.items() %}
    #             <div class="container">
    #                 <div class="url">{{ url }}</div>
    #                 <div class="vulnerabilities">
    #                     {% if vulnerabilities %}
    #                         <ul>
    #                             {% for vulnerability, details in vulnerabilities.items() %}
    #                                 <li>
    #                                     <strong>{{ vulnerability }}</strong>: {{ details }}
    #                                 </li>
    #                             {% endfor %}
    #                         </ul>
    #                     {% else %}
    #                         <div class="no-vulnerabilities">No vulnerabilities found.</div>
    #                     {% endif %}
    #                 </div>
    #             </div>
    #         {% endfor %}
    #     </body>
    #     </html>
    #     """)
    #     report = template.render(vulnerabilities_report=vulnerabilities_report)
    #     with open("vulnerability_report.html", "w") as file:
    #         file.write(report)

    def exploit_sql_injection(self, url):
        webbrowser.open(url)

    def exploit_xss_vulnerability(self, url):
        webbrowser.open(url)

    def close(self):
        self.driver.quit()
